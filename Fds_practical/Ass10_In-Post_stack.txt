#include <iostream>
#include <string.h>
#include <cctype>
using namespace std;

#define MAX 100

class Stack{
    int top;
    float fItems[MAX];

public:
    Stack() : top(-1) {}

    bool isFull(){
    	return top >= MAX -1;
	}

  bool isEmpty() {
        return top < 0;
    }
    
    void push(float value) {
        if (isFull()) {
            cout << "Stack is full\n";
            return;
        }
        fItems[++top] = value;
    }

    float pop() {
        if (top < 0) {
            cout << "Stack is empty\n";
            return -999;
        }
        return fItems[top--];
    }

    float peek() {
        if (top < 0) {
            cout << "Stack is empty\n";
            return -999;
        }
        return fItems[top];
    }
};

int priority(char ch) {
    if (ch == '+' || ch == '-')
        return 1;
    else if (ch == '*' || ch == '/')
        return 2;
    else
        return 0;
}

string infixToPostfix(const string& infix) {
    Stack stk;
    string postfix = "";
    
    for (int i = 0; i < infix.length(); i++) {
        char ch = infix[i];
        
        if (isdigit(ch)){
            postfix += ch;
        }
		else if (ch == '('){
            stk.push(ch);
        }
		else if (ch == ')'){
            while (!stk.isEmpty() && stk.peek() != '(') {
                postfix += stk.pop();
            }
            stk.pop(); // Remove '(' from stack
        }
		else{ // Operator
            while (!stk.isEmpty() && priority(stk.peek()) >= priority(ch)) {
                postfix += stk.pop();
            }
            stk.push(ch);
        }
    }
    
    while (!stk.isEmpty()) {
        postfix  +=  stk.pop();
    }
    
    return postfix;
}

float evaluatePostfix(const string& postfix) {
    Stack stk; 
    
    for (int i = 0; i < postfix.length(); i++) { 
        char ch = postfix[i]; 
        
        if(isdigit(ch)){
            stk.push(ch-'0'); 
		}
        else{ 
            float a = stk.pop(); 
            float b = stk.pop();
            
            if (ch == '+')
                stk.push(b+a);
            else if (ch == '-')
                stk.push(b-a);
            else if (ch == '*')
                stk.push(a*b);
            else if (ch == '/')
                stk.push(b/a);  
        } 
    }
    return stk.pop();
}

int main() {
    string infix;
    cout << "Enter infix expression: ";
    getline(cin, infix);  // Use getline to handle spaces and multi-character expressions

    string postfix = infixToPostfix(infix);
    cout << "The postfix expression is : " << postfix << endl;

    float result = evaluatePostfix(postfix);
    cout << "The result is: " << result << endl;

    return 0;
}